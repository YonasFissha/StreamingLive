AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  simple-websockets-chat-app

  SAM Template for simple-websockets-chat-app that has the DynamoDB table and Lambda
  functions needed to demonstrate the Websocket protocol on API Gateway.

Parameters:
  TableName:
    Type: String
    Default: 'simplechat_connections'
    Description: (Required) The name of the new DynamoDB to store connection identifiers for each connected clients. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'

Resources:
  StreamingLiveChat:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: StreamingLiveChat
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"
  DefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref StreamingLiveChat
      RouteKey: $default
      AuthorizationType: NONE
      OperationName: DefaultRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DefaultInteg
  DefaultInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref StreamingLiveChat
      Description: Default Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DefaultFunction.Arn}/invocations

#
#  ConnectRoute:
#    Type: AWS::ApiGatewayV2::Route
#    Properties:
#      ApiId: !Ref StreamingLiveChat
#      RouteKey: $connect
#      AuthorizationType: NONE
#      OperationName: ConnectRoute
#      Target: !Join
#        - '/'
#        - - 'integrations'
#          - !Ref ConnectInteg
#  ConnectInteg:
#    Type: AWS::ApiGatewayV2::Integration
#    Properties:
#      ApiId: !Ref StreamingLiveChat
#      Description: Connect Integration
#      IntegrationType: AWS_PROXY
#      IntegrationUri: 
#        Fn::Sub:
#            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations
#  DisconnectRoute:
#    Type: AWS::ApiGatewayV2::Route
#    Properties:
#      ApiId: !Ref StreamingLiveChat
#      RouteKey: $disconnect
#      AuthorizationType: NONE
#      OperationName: DisconnectRoute
#      Target: !Join
#        - '/'
#        - - 'integrations'
#          - !Ref DisconnectInteg
#  DisconnectInteg:
#    Type: AWS::ApiGatewayV2::Integration
#    Properties:
#      ApiId: !Ref StreamingLiveChat
#      Description: Disconnect Integration
#      IntegrationType: AWS_PROXY
#      IntegrationUri: 
#        Fn::Sub:
#            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations
#          */
#  HandleChatRoute:
#    Type: AWS::ApiGatewayV2::Route
#    Properties:
#      ApiId: !Ref StreamingLiveChat
#      RouteKey: handleChat
#      AuthorizationType: NONE
#      OperationName: HandleChatRoute
#      Target: !Join
#        - '/'
#        - - 'integrations'
#          - !Ref HandleChatInteg
#  HandleChatInteg:
#    Type: AWS::ApiGatewayV2::Integration
#    Properties:
#      ApiId: !Ref StreamingLiveChat
#      Description: Handle Chat Integration
#      IntegrationType: AWS_PROXY
#      IntegrationUri: 
#        Fn::Sub:
#            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HandleChatFunction.Arn}/invocations
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
#    - ConnectRoute
#    - HandleChatRoute
    - DefaultRoute
#    - DisconnectRoute
    Properties:
      ApiId: !Ref StreamingLiveChat
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Prod
      Description: Prod Stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref StreamingLiveChat
  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: "connectionId"
        AttributeType: "S"
      KeySchema:
      - AttributeName: "connectionId"
        KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: True
      TableName: !Ref TableName
  DefaultFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: app.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Role: arn:aws:iam::428019619026:role/StreamingLiveRole
#  OnConnectFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      CodeUri: onconnect/
#      Handler: app.handler
#      MemorySize: 256
#      Runtime: nodejs12.x
#      Environment:
#        Variables:
#          TABLE_NAME: !Ref TableName
#      Policies:
#      - DynamoDBCrudPolicy:
#          TableName: !Ref TableName
#  OnConnectPermission:
#    Type: AWS::Lambda::Permission
#    DependsOn:
#      - StreamingLiveChat
#    Properties:
#      Action: lambda:InvokeFunction
#      FunctionName: !Ref OnConnectFunction
#      Principal: apigateway.amazonaws.com
#  OnDisconnectFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      CodeUri: ondisconnect/
#      Handler: app.handler
#      MemorySize: 256
#      Runtime: nodejs12.x
#      Environment:
#        Variables:
#          TABLE_NAME: !Ref TableName
#      Policies:
#      - DynamoDBCrudPolicy:
#          TableName: !Ref TableName
#  OnDisconnectPermission:
#    Type: AWS::Lambda::Permission
#    DependsOn:
#      - StreamingLiveChat
#    Properties:
#      Action: lambda:InvokeFunction
#      FunctionName: !Ref OnDisconnectFunction
#      Principal: apigateway.amazonaws.com
#  HandleChatFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      CodeUri: ./
#      Handler: app.handler
#      MemorySize: 256
#      Runtime: nodejs12.x
#      Role: arn:aws:iam::428019619026:role/StreamingLiveRole
#      Environment:
#        Variables:
#          TABLE_NAME: !Ref TableName
#      Policies:
#      - DynamoDBCrudPolicy:
#          TableName: !Ref TableName
#      - Statement:
#        - Effect: Allow
#          Action:
#          - 'execute-api:ManageConnections'
#          Resource:
#          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${StreamingLiveChat}/*'
#  HandleChatPermission:
#    Type: AWS::Lambda::Permission
#    DependsOn:
#      - StreamingLiveChat
#    Properties:
#      Action: lambda:InvokeFunction
#      FunctionName: !Ref HandleChatFunction
#      Principal: apigateway.amazonaws.com
#  HandleChatDynamoPermission:
#    Type: AWS::DynamoDB::Permission
#    DependsOn:
#      - StreamingLiveChat
#    Properties:
#      Action: dynamodb:*
#      FunctionName: !Ref HandleChatFunction
#      Principal: apigateway.amazonaws.com

Outputs:
  ConnectionsTableArn:
    Description: "Connections table ARN"
    Value: !GetAtt ConnectionsTable.Arn

#  OnConnectFunctionArn:
#    Description: "OnConnect function ARN"
#    Value: !GetAtt OnConnectFunction.Arn

#  OnDisconnectFunctionArn:
#    Description: "OnDisconnect function ARN"
#    Value: !GetAtt OnDisconnectFunction.Arn

#  HandleChatFunctionArn:
#    Description: "HandleChat function ARN"
#    Value: !GetAtt HandleChatFunction.Arn

  WebSocketURI:
    Description: "The WSS Protocol URI to connect to"
    Value: !Join [ '', [ 'wss://', !Ref StreamingLiveChat, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/',!Ref 'Stage'] ]